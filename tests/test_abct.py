import pytest
from abct.abct import n, pn, r, s
from abct.output import bct


@pytest.mark.xfail
def test_BCT_string_all1s():
    for i in range(45, 51):
        t = 2**i - 2
        assert r(t) == t, f'Error for t = 2**{i} - 2'

@pytest.mark.xfail
def test_bug_case():
    t = 2**48 - 2
    assert r(t) == t


values = [5, 1234, 777888999, 
        2**47 - 2,
        2**48 - 2,
        # issue #7 step 535 value:
        2725982173685560458047355617578840280208791105973754682856726436882855782893562890521249094851421686106587349380533361268185327961073673917707457551884210027930388923690978075571493807898024872428990350369147948244023947153266736201100414369154186610681559291109239217142431485359100475017574025241094340246594084767790730611482899359562189860756307072982347142644935367260418230821951773906412786422598926013437720411519678908586297977044422797742029247490306245535569109927057512448045564453475212292895978229687326322120833918368127863383302041428905076263445473270078169259736717494980591110659852040627290963176787046749013553847748410834050013463060768648186603396512383353144865177310904819078322997782929083408553653187584579260514875283587445466254414665520690605172558746444971756742273265035729245932640754494550213953627869056422828226551444619990304770602579216379158371118656751669005709645260652711147878302621759466296768812896919074112911648257177046523764194607584887682539955926792988320977047185214415258113724017556102859985734361451532886880891726822178519460886900637504375418744003099037773474084300039740165562749989532816173866716848430576886499661316095,
        # issue #7 step 536 value:
        2725982173685425276620178397279307998851884070158300554239720336131937368724833951875320824584953926553206247460060147566788342053452031392489447098664223409601499605760691500979814804852452294813332934871682777717440012604135573142987196202112707261254571527760142839652870866844777706693514440500017671257209361839008928857812767283591624745973022302503580058980076600705501735794806473778453496839693635020991608425460984358922052657494592211492355931185314092022330208774805259815793655375764676391820677299295550367549221941527385999558503019117051983611405999262442358095809182117652660566073394529066040732687813771810642457024729371513754745954008848364925749032305571547150529117587957688094498193660933172533842346405558765154208913802053373143114121021096100067735235541952351408453196253632102645073995281338773043126278004641939481235178170050137221821763361669759489263909104106154538407152334790740820817762099719064668899100713042542989073950722750355152073706976825537896950216651457969265604134639875960282782820266632408939619656250933120364930447979882396034315491833611255012603524885800888695231733579544444217845673146837150853025121768450528089528724357119,
        ]


@pytest.mark.parametrize("v", values)
def test_s_number_symbols_in_bijectivebase2(v):
    assert s(v) == len(bct(v))

