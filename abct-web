#!/usr/bin/env python3
from abct.abct import pn, dn
from abct.output import abct_out, has_out

from http.server import SimpleHTTPRequestHandler
import json
import re
import socketserver
import sys


PORT = int(sys.argv[1])


class ABCTserver(SimpleHTTPRequestHandler):
    def _set_headers(self):
        self.send_header('Content-type', 'application/json;charset=utf-8')
        self.end_headers()

    def do_HEAD(self):
        self.send_response(200)
        self._set_headers()

    def do_GET(self):
        output = None
        try:
            p, d = (int(v) for v in self.path.split('/')[1:3])
            output = abct_out(d) if has_out(p, d) else None
            r = 200
            if d > 0:
                d = dn(p, d)
                r = 303
                self.send_response(r)
                self.send_header('Location', '/%d/%d/' % (pn(p), d))
            c = {'program': pn(p), 'data': d}
            if output:
                print('OUTPUT: %s' % output.decode())
                c['output'] = output.decode('utf8')
                self.send_header('Set-Cookie', 'output=%s' % output.decode('unicode-escape'))
        except Exception as e:
            raise e
            self.log_error('%s: %s', self.path, e)
            r = 400
            c = {'error': 'expecting URL path /<program (int)>/<data (int)>'}
        self.send_response(r)
        self._set_headers()
        self.wfile.write(json.dumps(c, ensure_ascii=False).encode('utf8'))


with socketserver.TCPServer(('', PORT), ABCTserver) as httpd:
    print('Arithmetic Bitwise Cycle Tag Server listening on port', PORT)
    httpd.serve_forever()
