#!/usr/bin/env python3
from abct.abct import pn, dn
from abct.output import bct, bin_to_bb2, abct_out, has_out

from http.server import SimpleHTTPRequestHandler
import json
import os
import re
import socketserver
import sys


PORT = int(os.environ.get('PORT') or sys.argv[1])


class ABCTserver(SimpleHTTPRequestHandler):
    def _set_headers(self):
        self.send_header('Content-type', 'application/json;charset=utf-8')
        self.end_headers()

    def do_HEAD(self):
        self.send_response(200)
        self._set_headers()

    def do_GET(self):
        PATH_RE = re.compile(r'/(b/)?(\d+)/(b/)?(\d+)')
        output = None
        c = {}
        try:
            p_bin, p, d_bin, d = PATH_RE.match(self.path).groups()
            if p_bin or d_bin:
                r = 303
                # path/data contains a BCT binary portion, convert and redirect
                p = bin_to_bb2(p) if p_bin else p
                d = bin_to_bb2(d) if d_bin else d
                self.send_response(r)
                self.send_header('Location', '/%s/%s/' % (p, d))
            else:
                p = int(p)
                d = int(d)
                c = {'program': bct(p), 'data': bct(d)}
                output = abct_out(d) if has_out(p, d) else None
                r = 200
                if d > 0:
                    d = dn(p, d)
                    r = 303
                    self.send_response(r)
                    self.send_header('Location', '/%d/%d/' % (pn(p), d))
                if output:
                    print('OUTPUT: %s' % output.decode())
                    c['output'] = output.decode('utf8')
                    self.send_header('Set-Cookie', 'output=%s' % output.decode('unicode-escape'))
        except Exception as e:
            raise e
            self.log_error('%s: %s', self.path, e)
            r = 400
            c = {'error': 'expecting URL path /<program (int)>/<data (int)>'}
        if r != 303:
            self.send_response(r)
        self._set_headers()
        self.wfile.write(json.dumps(c, ensure_ascii=False).encode('utf8'))


with socketserver.TCPServer(('', PORT), ABCTserver) as httpd:
    print('Arithmetic Bitwise Cycle Tag Server listening on port', PORT)
    httpd.serve_forever()
